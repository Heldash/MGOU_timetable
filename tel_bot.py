import os

import telebot
import datetime
# from openpyxl import load_workbook
import json
import re
import random
from GoogleShetrob import update
from raspisanie_update import upload_rasp
import TOKEN
# import time


# token = "5825628945:AAGZ1pDqtBYxLLA3yAfmYVsT98wmeeV5Ja4"
# token2 = "1512279847:AAF5MKawMcFwjx7khpVAJgdysUEDe9LvBsk"
token  = TOKEN.TOKEN1
bot = telebot.TeleBot(token)
stik_ran = ["CAACAgQAAxkBAAEGn9Bjh0tp3dzMwK5JO1BvSVI0yCUsAQACOw0AAtbmSFAxK-1eG55cfCsE",
            "CAACAgEAAxkBAAEGn9Rjh0z1rnIVn85ZVPXa9DZBUnkFLgACawQAAvhi8ERmUaTo2t1t_ysE",
            "CAACAgIAAxkBAAEGn9Zjh01Aw8ick5OeDUs06WTWJYcdQAACXAEAAhAabSKcIs6F61GChSsE",
            "CAACAgQAAxkBAAEGn9hjh04AAXlITxIq_Jaz10xVdTlyuH4AAkMLAALo4aBSIDcpNsGm758rBA",
            "CAACAgIAAxkBAAEGomVjiHEw3k0rKIbKRjjtmCYg06xAhQAC0RsAAhyGcUjQ7Rs7CfNrAysE",
            "CAACAgEAAxkBAAEGomdjiHSYhtzKYOODjoS-_0l60dh74QACnAIAAtscqEdAo37j6Iyu8CsE"]
month = ["–Ø–Ω–≤–∞—Ä—å","–§–µ–≤—Ä–∞–ª—å","–ú–∞—Ä—Ç","–ê–ø—Ä–µ–ª—å","–ú–∞–π","–ò—é–Ω—å","–ò—é–ª—å","–ê–≤–≥—É—Å","–°–µ–Ω—Ç—è–±—Ä—å","–û–∫—Ç—è–±—Ä—å","–ù–æ—è–±—Ä—å","–î–µ–∫–∞–±—Ä—å",]
wday= ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
with open("mgou.json","r") as file:
    rasp_mgou = json.load(file)
with open("Users.json","r") as file:
    try:
        users = json.load(file)
    except:
        users = {}
osn_dir = os.getcwd()
# print(osn_dir)
# üìö
abrev = {'–§–∞–∫—É–ª—å—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏':'OBZ',
'–§–∞–∫—É–ª—å—Ç–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—É–∫':'SIEN',
'–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ä–µ–º—ë—Å–µ–ª':'IMAG',
'–§–∞–∫—É–ª—å—Ç–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–ª–∏—Ç–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∞–≤–∞':'HPP',
'–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç':'LINGV',
'–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏':'PSYH',
'–§–∞–∫—É–ª—å—Ç–µ—Ç —Ä–æ–º–∞–Ω–æ-–≥–µ—Ä–º–∞–Ω—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤':'RGLANG',
'–§–∞–∫—É–ª—å—Ç–µ—Ç —Ä—É—Å—Å–∫–æ–π —Ñ–∏–ª–æ–ª–æ–≥–∏–∏':'RFIL',
'–§–∞–∫—É–ª—å—Ç–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–µ–¥–∞–≥–æ–≥–∏–∫–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏':'SOCPED',
'–§–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç':'PHYS',
'–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã':'FIZK',
'–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç':'ECONOM',
'–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç':'YRID',
'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç':'MED',
}
abrev_rash={'OBZ':'–§–∞–∫—É–ª—å—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
'SIEN':'–§–∞–∫—É–ª—å—Ç–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—É–∫',
'IMAG':'–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ä–µ–º—ë—Å–µ–ª',
'HPP':'–§–∞–∫—É–ª—å—Ç–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–ª–∏—Ç–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∞–≤–∞',
'LINGV':'–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
'PSYH':'–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏',
'RGLANG':'–§–∞–∫—É–ª—å—Ç–µ—Ç —Ä–æ–º–∞–Ω–æ-–≥–µ—Ä–º–∞–Ω—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤',
'RFIL':'–§–∞–∫—É–ª—å—Ç–µ—Ç —Ä—É—Å—Å–∫–æ–π —Ñ–∏–ª–æ–ª–æ–≥–∏–∏',
'SOCPED':'–§–∞–∫—É–ª—å—Ç–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–µ–¥–∞–≥–æ–≥–∏–∫–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏',
'PHYS':'–§–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
'FIZK':'–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã',
'ECONOM':'–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
'YRID':'–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
'MED':'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',}
# class User():
#     def __init__(self,chat_id,zareg = False):
#         print("–°–æ–∑–¥–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
#         self.chat_id = chat_id
#         self.zareg = zareg
#         if not self.zareg:
#             WELCOME_text = "–Ø –±–æ—Ç –∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ–º\n" \
#                            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –ø–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä\n" \
#                            "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞—á–µ—Ç–Ω—ã—Ö –∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π\n" \
#                            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–≤ –≤—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
#             bot.send_message(self.chat_id,WELCOME_text,reply_markup=create_inline_keyboard_forFak())
#         else:
#             bot.send_message(self.chat_id,"–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=create_inline_keyboard_forFak())
#     def add_fakult(self,fak,message_id):
#         self.fakult = abrev_rash[fak]
#         bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:",chat_id=self.chat_id,message_id=message_id,
#                               reply_markup=create_form_ob(self.fakult))
#     def add_form(self,form_obuch,message_id):
#         self.forma = form_obuch
#         bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–µ–ø–µ–Ω—å:", chat_id=self.chat_id, message_id=message_id,
#                               reply_markup=create_level(self.fakult,self.forma))
#     def add_level(self,level,message_id):
#         self.level = level
#         bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:", chat_id=self.chat_id, message_id=message_id,
#                               reply_markup=create_kod(self.fakult,self.forma,self.level))
#     def add_kod(self,kod,message_id):
#         self.kod = kod
#         bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ –≥—Ä—É–ø–ø—É:", chat_id=self.chat_id, message_id=message_id,
#                               reply_markup=create_group(self.fakult, self.forma, self.level,self.kod))
#     def add_user(self,group,message_id):
#         self.group = group
#         mark = telebot.types.InlineKeyboardMarkup(row_width=2)
#         mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="&calendar"))
#         zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
#         seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
#         mark.add(seg, zav)
#         bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {self.fakult} \n–§–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è: {self.forma}\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: {self.level}"
#                               f"\n–ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {self.kod}\n–ì—Ä—É–ø–ø—É: {self.group}", chat_id=self.chat_id, message_id=message_id,
#                              reply_markup=mark)
#         with open("Users.json", "r") as f:
#             try:
#                 all_user = json.load(f)
#             except:
#                 all_user = {}
#             if str(self.chat_id) in all_user:
#                 del all_user[str(self.chat_id)]
#             all_user[str(self.chat_id)] = [self.fakult,self.forma,self.level,self.kod,self.group]
#         json.dump(all_user,open("Users.json","w"),indent=2, ensure_ascii=False)
def create_inline_keyboard_forFak():
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    fak = [i for i in rasp_mgou]
    # print(type(fak[0]))
    # print(fak)
    for k in fak:
        # print(k)
        btn = telebot.types.InlineKeyboardButton(k.lower().replace("—Ñ–∞–∫—É–ª—å—Ç–µ—Ç",""),callback_data=f"fak{abrev[k]}")
        markup.add(btn)
    return markup

def create_form_ob(fak):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    for i in rasp_mgou[fak]:
        btn = telebot.types.InlineKeyboardButton(i,callback_data=f"rez{i}")
        markup.add(btn)
    naz = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data="nazfak")
    markup.add(naz)
    return markup


def create_level(fak,form):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    for i in rasp_mgou[fak][form]:
        btn = telebot.types.InlineKeyboardButton(i,callback_data=f"bms{i}")
        markup.add(btn)
    naz = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data="nazrez")
    markup.add(naz)
    return markup


def create_kod(fak,form,level):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    with open(os.path.join(os.getcwd(),"Fakultet",fak,form,level,"group.json"),"r")as file_gr:
        kod = json.load(file_gr)
        kod = kod["—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"]
    for i in kod:
        btn = telebot.types.InlineKeyboardButton(kod[i], callback_data=f"kod{i}")
        markup.add(btn)
    naz = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="nazbms")
    markup.add(naz)
    return markup

def create_group(fak,form,level,kod):
    with open(f"./Fakultet/{fak}/{form}/{level}/group.json","r") as gr:
        groups = json.load(gr)
        key_words = groups['—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞']
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        array_groups = []
        # for vector in groups:
        #     if vector != '—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞':
        for stud_ftd in groups[key_words[kod]]:
            for view in groups[key_words[kod]][stud_ftd]:
                if groups[key_words[kod]][stud_ftd][view] != {}:
                    array_groups += list(groups[key_words[kod]][stud_ftd][view].keys())
        array_groups = set(array_groups)
        # array_groups = list(groups[key_words[kod]]["–£—á–µ–±–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"]["–ó–∞–Ω—è—Ç–∏—è"].keys())
        for i in array_groups:
            btn = telebot.types.InlineKeyboardButton(i,callback_data=f"gro{i}")
            markup.add(btn)
        # naz = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="naz")
        naz = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="nazkod")
        markup.add(naz)
        return markup
def op_json_for_user(mes_id):
    with open("Users.json", "r") as file:
        try:
            user = json.load(file)
        except:
            user = None
        if str(mes_id) in user:
            return user[mes_id]
        else:
            bot.send_message(mes_id,"–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                    "'–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '\\start'")

@bot.message_handler(commands=['start'])
def start_message(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    btn2 = telebot.types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    btn3 = telebot.types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    btn4 = telebot.types.KeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å")
    btn5 = telebot.types.KeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
    markup.add(btn1,btn2,btn3)
    markup.add(btn4)
    markup.add(btn5)
    # with open("Users.json", "w") as us:
    #     users = json.load(us)
    # global user_id
    # global user
    bot.send_message(message.chat.id,"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –¥–æ—Ä–æ–≥–æ–π —Å—Ç—É–¥–µ–Ω—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤ —á–µ–º —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
                                     "–∫–æ–º–º–∞–Ω–¥—É '\\start' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É'",reply_markup=markup)
    users[str(message.chat.id)] = ["_"]*5
    WELCOME_text = "–Ø –±–æ—Ç –∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ–º\n" \
                   "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –ø–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä\n" \
                   "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞—á–µ—Ç–Ω—ã—Ö –∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π\n" \
                   "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–≤ –≤—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
    bot.send_message(message.chat.id, WELCOME_text, reply_markup=create_inline_keyboard_forFak())

    mark = telebot.types.InlineKeyboardMarkup(row_width=2)
    mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="&calendar"))
    zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
    seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
    mark.add(seg, zav)
    # bot.send_message(message.chat.id,"–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞",reply_markup=markup)
    # bot.send_message(message.chat.id,"–ù—É –∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ–µ—Å—è –≤–Ω–∏–∑—É –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",reply_markup=mark)


@bot.message_handler(content_types=['text'])
def osnova(message):
    if message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        ass = datetime.datetime.now() #–î–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –µ—Å–ª–∏ —á—Ç–æ)
        res = ass.strftime("%d.%m.%y")
        mark = telebot.types.InlineKeyboardMarkup(row_width=2)
        mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="&calendar"))
        zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
        seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
        mark.add(seg, zav)
        bot.send_message(message.chat.id,but_rasp(res,message.chat.id),reply_markup=mark)


    elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        aft= datetime.datetime.now()
        aft =  aft + datetime.timedelta(days=1)
        zav = aft.strftime("%d.%m.%y")
        mark = telebot.types.InlineKeyboardMarkup(row_width=2)
        mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="&calendar"))
        zavtr = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
        seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
        mark.add(seg, zavtr)
        bot.send_message(message.chat.id,but_rasp(zav, message.chat.id),reply_markup=mark)


    elif message.text == "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        if str(message.chat.id) != "437194156":
            bot.send_message(message.chat.id,"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É –Ω–æ –≤—ã –µ–µ –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ :)")
        elif str(message.chat.id) == "437194156":
            bot.send_message(message.chat.id,"–ù–∞—á–∞–ª –æ–±–Ω–æ–≤—É")
            bot.send_message(message.chat.id,"–û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–π")
            update()
            # while not itog:
            #     time.sleep(60)
            #     itog = update()
            bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å—Å–ø–∏—Å–≤–Ω–∏–µ –≥—Ä—É–ø–ø")
            upload_rasp()
            bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            os.chdir(osn_dir)
    elif re.fullmatch(r"\d\d\D\d\d\D\d\d",message.text):
        dat = message.text[0:2]+"."+message.text[3:5]+"."+message.text[6:8]
        bot.send_message(message.chat.id,but_rasp(dat,message.chat.id))

    elif message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å":
        dat = datetime.datetime.now().timetuple()
        year = dat.tm_year
        mes = dat.tm_mon
        bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É",reply_markup=calendar(mes,year,message.chat.id))
    elif message.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        users[str(message.chat.id)] = ["_"]*5
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ", reply_markup=create_inline_keyboard_forFak())
        # User(message.chat.id)
        # bot.send_message(message.chat.id,"–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        bot.send_message(message.chat.id,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —ç—Ç–æ")
        bot.send_sticker(message.chat.id,stik_ran[random.randint(0,len(stik_ran)-1)])

@bot.callback_query_handler(func=lambda call: call.data[:3] in ("fak","rez","bms","kod","naz","gro"))
def user_add(call):
    if call.data[:3]=="fak":
        info = call.data[3:]
        info = abrev_rash[info]
        users[str(call.message.chat.id)][0] = info
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:",chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_form_ob(info))
        # user.add_fakult(info,call.message.message_id)
    elif call.data[:3]=="rez":
        info = call.data[3:]
        users[str(call.message.chat.id)][1] = info
        bot.edit_message_text("–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:", chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_level(users[str(call.message.chat.id)][0],info))
        # user.add_form(info, call.message.message_id)
    elif call.data[:3]=="bms":
        info = call.data[3:]
        users[str(call.message.chat.id)][2] = info
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_kod(users[str(call.message.chat.id)][0],
                              users[str(call.message.chat.id)][1],info))
        # user.add_level(info, call.message.message_id)
    elif call.data[:3]=="kod":
        info = call.data[3:]
        users[str(call.message.chat.id)][3] = info
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_group(users[str(call.message.chat.id)][0],
                                                      users[str(call.message.chat.id)][1],
                                                        users[str(call.message.chat.id)][2],
                                                      info))
        # user.add_kod(info, call.message.message_id)
    elif call.data[:3]=="gro":
        with open(os.path.join(os.getcwd(),"Fakultet",users[str(call.message.chat.id)][0],
                               users[str(call.message.chat.id)][1],users[str(call.message.chat.id)][2],
                               "group.json"),"r") as file_kods:
            kod = json.load(file_kods)
            kod = kod["—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"]#–ó–∞–≥—Ä—É–∂–∞—é –∫–æ–¥—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        info = call.data[3:]
        users[str(call.message.chat.id)][4] = info
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {users[str(call.message.chat.id)][0]} "
                              f"\n–§–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:{users[str(call.message.chat.id)][1]}"
                              f"\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: {users[str(call.message.chat.id)][2]}"
                              f"\n–ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {kod[users[str(call.message.chat.id)][3]]}"
                              f"\n–ì—Ä—É–ø–ø—É: {users[str(call.message.chat.id)][4]}",
                              chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=None)
        with open("Users.json","r") as file:
            try:
                all_user = json.load(file)
            except:
                all_user = {}
        with open("Users.json","w") as f:
            if str(call.message.chat.id) in all_user:
                del all_user[str(call.message.chat.id)]
                json.dump(users,f,indent=2, ensure_ascii=False)
            else:
                json.dump(users, f, indent=2, ensure_ascii=False)
        # user.add_user(info, call.message.message_id)
    elif call.data[:3]== "naz":
        info = call.data[3:]
        if info == "fak":# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            bot.edit_message_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_inline_keyboard_forFak())
        elif info == "rez":# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:",chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_form_ob(users[str(call.message.chat.id)][0]))
        elif info == "bms":# –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_level(users[str(call.message.chat.id)][0],
                                                        users[str(call.message.chat.id)][1]))
        elif info == "kod":# –ù–∞–∑–∞–¥ –∫ –∫–æ–¥—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥:",chat_id=str(call.message.chat.id),
                              message_id=call.message.message_id,
                              reply_markup=create_kod(users[str(call.message.chat.id)][0],
                                                      users[str(call.message.chat.id)][1],
                                                      users[str(call.message.chat.id)][2]))


@bot.callback_query_handler(func=lambda call:re.fullmatch(r"\d\d\D\d\d\D\d\d",call.data))
def day_call(call):
    mark = telebot.types.InlineKeyboardMarkup(row_width=2)
    mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="&calendar"))
    zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
    seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
    mark.add(seg, zav)
    bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                          text=but_rasp(call.data, str(call.message.chat.id)), reply_markup=mark)

@bot.callback_query_handler(func=lambda call: call.data[0]in"<>!&" or call.data == "month" or call.data in
                                              ("Seg","Zav"))
def kalendar_call(call):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"""
    try:
        if call.message:
            # try:
            #     if datetime.datetime.strptime(call.data, "%d.%m.%y"):
            #         # but_rasp(call.data, str(call.message.chat.id))
            #         mark = telebot.types.InlineKeyboardMarkup(row_width=2)
            #         mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å",callback_data="&calendar"))
            #         zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",callback_data="Zav")
            #         seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",callback_data="Seg")
            #         mark.add(seg,zav)
            #         bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
            #                               text=but_rasp(call.data, str(call.message.chat.id)), reply_markup=mark)
            # except:
            mark = telebot.types.InlineKeyboardMarkup(row_width=2)
            mark.add(telebot.types.InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="&calendar"))
            zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
            seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
            mark.add(seg, zav)
            dat = datetime.datetime.now().timetuple()
            if dat.tm_mon <=7:
                period = (dat.tm_year-1,dat.tm_year)
            else:
                period = (dat.tm_year,dat.tm_year+1)
            if call.data[0] == "<":
                mes,year = map(int,call.data.split(".")[1:])
                mes -= 1
                if mes<=0:
                    year-=1
                    mes = 12
                if mes >7 and year==period[0] or mes<=7 and year == period[1]:
                    bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                                          text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar(mes, year,str(call.message.chat.id)))
                else:
                    # bot.answer_callback_query(str(call.message.chat.id),show_alert=False,text="–î–∞–ª—å—à–µ –Ω–µ–ª—å–∑—è")
                    bot.send_message(str(call.message.chat.id),"–î–∞–ª—å—à–µ –Ω–µ–ª—å–∑—è)")
                # bot.edit_message_text(chat_id=str(call.message.chat.id),message_id=call.message.message_id,text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É",reply_markup=calendar(mes,year))
            elif call.data[0] == ">":
                mes, year = map(int,call.data.split(".")[1:])
                mes += 1
                if mes > 12:
                    year += 1
                    mes = 1
                # if mes < 7 and year>dat.tm_year or mes<=7 and year == dat.tm_year:
                if mes >7 and year==period[0] or mes<=7 and year == period[1]:
                    bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                                          text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar(mes, year,str(call.message.chat.id)))
                else:
                    # bot.answer_callback_query(callback_query_id=str(call.message.chat.id), show_alert=False, text="–î–∞–ª—å—à–µ –Ω–µ–ª—å–∑—è")
                    bot.send_message(str(call.message.chat.id),"–î–∞–ª—å—à–µ –Ω–µ–ª—å–∑—è)")
            elif call.data[:5] == "month":
                bot.edit_message_text(chat_id=str(call.message.chat.id),message_id=call.message.message_id,text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",reply_markup=chos_mes())
            elif call.data[0] == "!":
                mes, year = map(int, call.data.split(".")[1:])
                bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                                      text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar(mes, year,str(call.message.chat.id)))
            elif call.data[0] == "&":
                mes,year = dat.tm_mon,dat.tm_year
                bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                                      text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar(mes, year, str(call.message.chat.id)))
            elif call.data[:3] == "Seg":
                mes, year,day = dat.tm_mon, dat.tm_year,dat.tm_mday
                dato = datetime.datetime(year,mes,day)
                bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                                      text=but_rasp(dato.strftime("%d.%m.%y"),str(call.message.chat.id)), reply_markup=mark)
            elif call.data[:3] == "Zav":
                mes, year,day = dat.tm_mon, dat.tm_year,dat.tm_mday
                dato = datetime.datetime(year,mes,day) + datetime.timedelta(days=1)
                bot.edit_message_text(chat_id=str(call.message.chat.id), message_id=call.message.message_id,
                                      text=but_rasp(dato.strftime("%d.%m.%y"),str(call.message.chat.id)), reply_markup=mark)
            else:
                bot.send_message(str(call.message.chat.id),"–í—ã –Ω–µ —Ç—É–¥–∞ –Ω–∞–∂–∞–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    except Exception as e:
        print(repr(e))

def chos_mes():
    """–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ –º–µ—Å—è—Ü–µ–≤"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=4)
    dat = datetime.datetime.now().timetuple()
    mes = []
    cnt = 0
    for i in range(6,len(month)):
        mes.append(telebot.types.InlineKeyboardButton(month[i],callback_data="!."+str(i+1)+f".{dat.tm_year if 6<dat.tm_mon<=12 else dat.tm_year-1}"))
        # print("!"+str(i)+f".{dat.tm_year if 6<dat.tm_mon<=12 else dat.tm_year-1}")
        cnt+=1
        if cnt >= 4:
            markup.add(mes[0],mes[1],mes[2],mes[3])
            cnt = 0
            mes = []
    for i in range(6):
        mes.append(telebot.types.InlineKeyboardButton(month[i],callback_data="!."+str(i+1)+f".{dat.tm_year if dat.tm_mon<6 else dat.tm_year+1}"))
        # print("!"+str(i) + f".{dat.tm_year if dat.tm_mon < 6 else dat.tm_year + 1}")
        cnt+=1
        if cnt >=4:
            markup.add(mes[0], mes[1], mes[2], mes[3])
            cnt = 0
            mes = []
    return markup

def calendar(mes,year,mes_id):
    markup1 = telebot.types.InlineKeyboardMarkup(row_width=7)
    title = telebot.types.InlineKeyboardButton(str(year),callback_data="_")
    markup1.add(title)
    wd1 = telebot.types.InlineKeyboardButton("–ü–Ω", callback_data="_")
    wd2 = telebot.types.InlineKeyboardButton("–í—Ç", callback_data="_")
    wd3 = telebot.types.InlineKeyboardButton("–°—Ä", callback_data="_")
    wd4 = telebot.types.InlineKeyboardButton("–ß—Ç", callback_data="_")
    wd5 = telebot.types.InlineKeyboardButton("–ü—Ç", callback_data="_")
    wd6 = telebot.types.InlineKeyboardButton("–°–±", callback_data="_")
    # wd7 = telebot.types.InlineKeyboardButton("–í—Å", callback_data="_") –£–±—Ä–∞–ª –Ω–∞ –≤—Ä–µ–º—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    # markup1.add(wd1, wd2, wd3, wd4, wd5, wd6, wd7)
    markup1.add(wd1, wd2, wd3, wd4, wd5, wd6)
    mass = ["_"] * 6
    for i in range(1, 32):
        try:
            dat = datetime.date(year, mes, i)
        except:
            if any(i!="_" for i in mass):
                markup1.add(obj_creat(mass[0], year, mes,mes_id), obj_creat(mass[1], year, mes,mes_id), obj_creat(mass[2], year, mes,mes_id),
                            obj_creat(mass[3], year, mes,mes_id), obj_creat(mass[4], year, mes,mes_id), obj_creat(mass[5], year, mes,mes_id))
            break
        inf = dat.timetuple()
        if inf.tm_wday < 6:
            mass[inf.tm_wday] = i
        if inf.tm_wday == 5:
            markup1.add(obj_creat(mass[0], year, mes,mes_id), obj_creat(mass[1], year, mes,mes_id), obj_creat(mass[2], year, mes,mes_id),
                        obj_creat(mass[3], year, mes,mes_id), obj_creat(mass[4], year, mes,mes_id), obj_creat(mass[5], year, mes,mes_id))
            mass = ["_"] * 6
    else:
        if any(i != "_" for i in mass):
            markup1.add(obj_creat(mass[0], year, mes,mes_id), obj_creat(mass[1], year, mes,mes_id), obj_creat(mass[2], year, mes,mes_id),
                        obj_creat(mass[3], year, mes,mes_id), obj_creat(mass[4], year, mes,mes_id), obj_creat(mass[5], year, mes,mes_id))
    nalev = telebot.types.InlineKeyboardButton("<=", callback_data=f"<.{mes}.{year}")
    mesyac = telebot.types.InlineKeyboardButton(month[inf.tm_mon - 1], callback_data="month")
    napravo = telebot.types.InlineKeyboardButton("=>", callback_data=f">.{mes}.{year}")
    markup1.add(nalev, mesyac, napravo)
    zav = telebot.types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="Zav")
    seg = telebot.types.InlineKeyboardButton("–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="Seg")
    markup1.add(seg,zav)
    return markup1


def obj_creat(days,year,mes,mes_id):
    """–ù—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if days != "_":
        user = users[str(mes_id)]
        day = datetime.date(year,mes,days)
        day = day.strftime("%d.%m.%y")
        with open(f"./Fakultet/{user[0]}/{user[1]}/{user[2]}/group.json", "r") as read_file:
            rasp = json.load(read_file)
            rasp = rasp[rasp["—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"][user[3]]]
            is_les = False
            for ftd_ob in rasp:
                for EZG in rasp[ftd_ob]:  # –ó–∞–Ω—è—Ç–∏—è, –≠–∫–∑–∞–º–µ–Ω, –ó–∞—á–µ—Ç—ã, –≥–æ—Å —ç–∫–∑
                    if user[4] in rasp[ftd_ob][EZG]:
                        if day in rasp[ftd_ob][EZG][user[4]]:
                            is_les = True
                            break
                if is_les:
                    break
            if is_les:
                return telebot.types.InlineKeyboardButton(f"{days}üìñ",
                                                          callback_data=
                                                          datetime.date(year, mes, days).strftime("%d.%m.%y"))
            else:
                return telebot.types.InlineKeyboardButton(str(days), callback_data="_")
    else:
        return telebot.types.InlineKeyboardButton(days, callback_data="_")

    #     for i in u
    #     return telebot.types.InlineKeyboardButton(str(days),callback_data=datetime.date(year, mes, days).strftime("%d.%m.%y"))
    # else:
    #     return telebot.types.InlineKeyboardButton(days,callback_data="_")

def but_rasp(mes,mes_id):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    dat = mes[0:2] + "." + mes[3:5] + "." + mes[6:8]
    susnya_dat = datetime.datetime.strptime(dat,"%d.%m.%y")
    inf_dat = susnya_dat.timetuple()
    d = inf_dat.tm_mday
    wd = inf_dat.tm_wday
    user = users[str(mes_id)]

    with open(f"./Fakultet/{user[0]}/{user[1]}/{user[2]}/group.json", "r") as read_file:
        flag = False
        rasp = json.load(read_file)
        name_group = rasp["—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"][user[3]]
        name_month = month[inf_dat.tm_mon - 1].lower()
        if name_month in ("–º–∞—Ä—Ç","–∞–≤–≥—É—Å—Ç"):
            name_month = name_month+"–∞"
        else:
            name_month = name_month[: -1] + "—è"
        itog = f"[{user[4]}]  " + str(d) + " " + name_month + " " + wday[wd].lower() + "\n\n"
        lesson = {"–§–¢–î": {"–ó–∞–Ω—è—Ç–∏—è":None,
                          "–≠–∫–∑–∞–º–µ–Ω—ã":None,
                          "–ó–∞—á–µ—Ç—ã":None},
                    "–£—á–µ–±–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã":{"–ó–∞–Ω—è—Ç–∏—è":None,
                          "–≠–∫–∑–∞–º–µ–Ω—ã":None,
                          "–ó–∞—á–µ—Ç—ã":None}}
        is_les = False
        for ftd_ob in rasp[name_group]:
            for EZG in rasp[name_group][ftd_ob]:# –ó–∞–Ω—è—Ç–∏—è, –≠–∫–∑–∞–º–µ–Ω, –ó–∞—á–µ—Ç—ã, –≥–æ—Å —ç–∫–∑
                if user[4] in rasp[name_group][ftd_ob][EZG]:
                    if dat in rasp[name_group][ftd_ob][EZG][user[4]]:
                        is_les = True
                        lesson[ftd_ob][EZG] = rasp[name_group][ftd_ob][EZG][user[4]][dat]
        if is_les:
            for i in lesson:
                if not(all(lesson[i][k] == None for k in lesson[i])):
                    itog+=f"{i}\n"
                    for ezg in lesson[i]:
                        if lesson[i][ezg]!= None:
                            itog+=f"{ezg}:\n\n"
                            for less in lesson[i][ezg]:
                                itog += f"{less}\n\n"
            return itog
        else:
            return "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç"
            # bot.send_message(mes_id, "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç")
bot.infinity_polling()